[{"C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\index.js":"1","C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\App.jsx":"2","C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\components\\component.productivitytracker.jsx":"3"},{"size":235,"mtime":1611710661641,"results":"4","hashOfConfig":"5"},{"size":189,"mtime":1611710327543,"results":"6","hashOfConfig":"5"},{"size":3769,"mtime":1611710312856,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yn42ty",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},"C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\index.js",[],"C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\App.jsx",[],["16","17"],"C:\\Users\\Chris\\desktop\\reactlearning\\productivitytrackerapp\\productivitytracker\\src\\components\\component.productivitytracker.jsx",["18"],"/** @format */\r\n\r\nimport react, { Component } from 'react';\r\nimport './styles.productivitytracker.css';\r\n\r\nexport default class ProductivityTracker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.updateTime = this.updateTime.bind(this);\r\n    this.updateDateTime = this.updateDateTime.bind(this);\r\n    this.updateActiveTime = this.updateActiveTime.bind(this);\r\n    this.updateInactiveTime = this.updateInactiveTime.bind(this);\r\n    this.startTracker = this.startTracker.bind(this);\r\n    this.pauseTracker = this.pauseTracker.bind(this);\r\n    this.resetTracker = this.resetTracker.bind(this);\r\n\r\n    this.state = {\r\n      timerStarted: false,\r\n      timerPaused: false,\r\n      intervalDuration: 1000,\r\n      intervalId: null,\r\n      dateTime: new Date().toLocaleTimeString(),\r\n      activeTime: 0,\r\n      inactiveTime: 0,\r\n      totalTimeElapsed: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { intervalDuration } = this.state;\r\n    const timerInterval = setInterval(\r\n      () => this.updateTime(),\r\n      intervalDuration\r\n    );\r\n\r\n    this.setState({\r\n      dateTime: new Date().toLocaleTimeString(),\r\n      intervalId: timerInterval,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.intervalId);\r\n    this.setState({ intervalId: null });\r\n  }\r\n\r\n  updateTime() {\r\n    const oldState = this.state;\r\n    oldState.dateTime = this.updateDateTime();\r\n    oldState.activeTime = this.updateActiveTime();\r\n    oldState.inactiveTime = this.updateInactiveTime();\r\n    oldState.totalTimeElapsed = this.updateTotalElapsedTime();\r\n\r\n    this.setState(oldState);\r\n  }\r\n\r\n  updateDateTime() {\r\n    return new Date().toLocaleTimeString();\r\n  }\r\n\r\n  updateActiveTime() {\r\n    const {\r\n      timerStarted,\r\n      timerPaused,\r\n      activeTime,\r\n      intervalDuration,\r\n    } = this.state;\r\n    return timerStarted && !timerPaused\r\n      ? activeTime + intervalDuration\r\n      : activeTime;\r\n  }\r\n\r\n  updateInactiveTime() {\r\n    const {\r\n      timerStarted,\r\n      timerPaused,\r\n      inactiveTime,\r\n      intervalDuration,\r\n    } = this.state;\r\n\r\n    return timerStarted && timerPaused\r\n      ? inactiveTime + intervalDuration\r\n      : inactiveTime;\r\n  }\r\n\r\n  updateTotalElapsedTime() {\r\n    const { timerStarted, intervalDuration, totalTimeElapsed } = this.state;\r\n    return timerStarted\r\n      ? totalTimeElapsed + intervalDuration\r\n      : totalTimeElapsed;\r\n  }\r\n\r\n  startTracker() {\r\n    this.setState((oldState) => {\r\n      return { ...oldState, timerStarted: true, timerPaused: false };\r\n    });\r\n  }\r\n\r\n  pauseTracker() {\r\n    this.setState((oldState) => {\r\n      return { ...oldState, timerPaused: true };\r\n    });\r\n  }\r\n\r\n  resetTracker() {\r\n    this.setState((oldState) => {\r\n      return {\r\n        ...oldState,\r\n        timerStarted: false,\r\n        timerPaused: false,\r\n        activeTime: 0,\r\n        inactiveTime: 0,\r\n        totalTimeElapsed: 0,\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { dateTime, activeTime, inactiveTime, totalTimeElapsed } = this.state;\r\n\r\n    return (\r\n      <div className='tracker-container'>\r\n        <h3>Productivity Tracker</h3>\r\n        <div className='tracker-contents'>\r\n          <div className='tracker-display'>\r\n            <label>Current Time: {dateTime}</label>\r\n            <label>Active Time: {activeTime}</label>\r\n            <label>Inactive Time: {inactiveTime} </label>\r\n            <label>Total Elapsed: {totalTimeElapsed}</label>\r\n          </div>\r\n          <div className='tracker-controls'>\r\n            <button onClick={this.startTracker}>Start</button>\r\n            <button onClick={this.pauseTracker}>Pause</button>\r\n            <button onClick={this.resetTracker}>Reset</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":3,"column":8,"nodeType":"25","messageId":"26","endLine":3,"endColumn":13},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]